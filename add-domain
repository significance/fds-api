#!/bin/bash

domain=$1
email=$2 # Adding a valid address is strongly recommended
rsa_key_size=4096
staging=0 # Set to 1 if you're testing your setup to avoid hitting request limits

if [ "$email" == "" ] || [ "$domain" == "" ]; then
  echo "Usage: ./add-domain [sub.domain.tld] [dan@email.com]"
  exit
fi

echo "Adding $domain \n"

cat <<EndOfMessage
Please ensure you have added the following to nginx/conf/default.conf

server {
    listen 80;
    server_name $domain;
    location / {
        return 301 https://\$host\$request_uri;
    }    
    location /.well-known/acme-challenge/ {
       root /var/www/certbot;
    } 
}

server {
    listen 443 ssl;
    server_name $domain;
  
    location / {
        # ...
    }

    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

EndOfMessage

read -p "Continue? (y/N) " decision
if [ "$decision" != "Y" ] && [ "$decision" != "y" ]; then
  exit
fi

echo "### Creating dummy certificate for $domain ..."
path="/etc/letsencrypt/live/$domain"
docker stop certbot
docker-compose run --rm --entrypoint "mkdir -p $path" certbot
docker-compose run --rm --entrypoint "\
  openssl req -x509 -nodes -newkey rsa:1024 -days 1\
    -keyout '$path/privkey.pem' \
    -out '$path/fullchain.pem' \
    -subj '/CN=localhost'" certbot
echo

echo "### Starting nginx ..."
docker-compose up -d --force-recreate --no-deps --build nginx
echo

echo "### Deleting dummy certificate for $domain ..."
docker-compose run --rm --entrypoint "\
  rm -Rf /etc/letsencrypt/live/$domain && \
  rm -Rf /etc/letsencrypt/archive/$domain && \
  rm -Rf /etc/letsencrypt/renewal/$domain.conf" certbot
echo

echo "### Requesting Let's Encrypt certificate for $domain ..."
#Join $domain to -d args
domain_args=""
for domain in "${domain[@]}"; do
  domain_args="$domain_args -d $domain"
done

# Select appropriate email arg
case "$email" in
  "") email_arg="--register-unsafely-without-email" ;;
  *) email_arg="--email $email" ;;
esac

# Enable staging mode if needed
if [ $staging != "0" ]; then staging_arg="--staging"; fi

docker-compose run --rm --entrypoint "\
  certbot certonly --webroot -w /var/www/certbot \
    $staging_arg \
    $email_arg \
    $domain_args \
    --rsa-key-size $rsa_key_size \
    --agree-tos \
    --force-renewal" certbot
echo

echo "### Reloading nginx ..."
docker-compose exec nginx nginx -s reload
